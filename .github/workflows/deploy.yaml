###https://github.com/marketplace?type=actions
name: Deployment (continers)
on:
  push:
    branches: [main, master, rohini]
permissions:
  contents: write

env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on:
      ubuntu-latest
      ##image: nodde:16-alpine
      ##options: --priviledged
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      MONGODB_CLUSTER_ADDRESS: cluster0.krj9lox.mongodb.net
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080 ## Port for the application
    #services:
    #    mongodb:
    #      image: mongo:latest
    #      env:
    #       MONGODB_DATABASE: gha-demo
    #       MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
    #       MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
    #      ports:
    #        - 27017:27017
    #      options: >-
    #        --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongo --host localhost --port 27017 --quiet"
    #        --health-interval 10s
    #        --health-timeout 5s
    #        --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - uses: actions/setup-node@v4 ## this action sets up Node.js for use in the workflow
        with:
          node-version: "20"
      - name: Build
        run: npm run build --if-present
      - name: Run server & tee logs ## Start the server and log output
        run: |
          npm run start 2>&1 | tee server.log &   ## Start the server in the background and log output to server.log
          npx wait-on http://localhost:8080
      - name: Tail server logs on failure
        if: failure() ##if the previous step fails, this will run
        run: tail -n 300 server.log

      - name: Run tests
        run: npx playwright test
      - name: Run tests (webServer in config will boot API)
        run: npx playwright test
      - name: Run tests
        run: npm test
      - name: Run server
        run: npm start & npx wait-on http://localhost:$PORT ## Wait for the server to start, the main process will be the server
      - name: Output information
        run: |
          echo "Server is running on port $PORT"
          echo "MongoDB is running on mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_CLUSTER_ADDRESS/$MONGODB_DB_NAME"
  #  --- 1) MongoDb  example ---

  mongodb-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps ## relevent to root folder of the repo
      - name: Run MongoDB tests
        run: npm run test

  deploy:
    needs: [ test, mongodb-test ]
    runs-on: ubuntu-latest
    steps:
      - name: Output-information
        env:
          PORT: 3000 ## Port for the application, can be set to any available port
        run: |
          echo "Deployment started"
          echo "Server will run on port $PORT"
          echo "${{ env.PORT }}"
          echo "MongoDB is running on mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_CLUSTER_ADDRESS/$MONGODB_DB_NAME"

      - name: Install deps & build site
        run: |
          npm run install
          npm run build --if-present

      - name: ChatGPT CodeReviewer
        uses: anc95/ChatGPT-CodeReview@v1.0.22
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          model: gpt-4o
          prompt: "Review the code and provide suggestions for improvement."
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.18.0
