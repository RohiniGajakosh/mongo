###https://github.com/marketplace?type=actions
##https://github.com/marketplace/actions/github-pages-action
name: Deployment (continers)
on:
  push:
    branches: [main, master, rohini]
permissions:
  contents: write

env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  ############### 1) MongoDB  example ##################
  # This job is for testing the MongoDB connection and running tests that require MongoDB.
  # It uses a MongoDB service container to run the tests against a real MongoDB instance.
  # The job will fail if the MongoDB service is not healthy or if the tests do not pass.
  test:
    runs-on: ubuntu-latest ## This specifies the type of runner to use for the job, where the job will run.
    environment: testing
    ## This specifies the environment in which the job will run, useful for managing secrets and deployment environments.
    ## The environment can be used to control access to resources and manage secrets.

    ############### 2) MongoDB  example ##################
    container: ## This specifies the container image to use for the job, this will be used to run the job in a Docker container, which provides a consistent environment for the job to run in, with all dependencies pre-installed.
      image: node:16-alpine ## This specifies the Docker image to use for the job, in this case, a Node.js image based on Alpine Linux.
      ##The ubuntu-latest image is used for the job and the nodde:16-alpine image is used for the container which provides a lightweight Node.js environment running the mongoDB service and steps will run in ubuntu-latest environment.
      options: --privileged ## This option allows the container to run with elevated privileges, which may be necessary for certain operations.
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      MONGODB_CLUSTER_ADDRESS: mongodb ## This is the address of the MongoDB cluster, which is used to connect to the database and shold be same as the one used in the application.
      MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080 ## Port for the application
    services:
      mongodb: ## This will be same as the one used in the application, this is the service that will be used to run the MongoDB instance.
        image: mongo:latest
        env:
          MONGODB_DATABASE: gha-demo
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongo --host localhost --port 27017 --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    ##One job will run on one container and the next job will run on another container, this is how the jobs are isolated from each other.

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - uses: actions/setup-node@v4 ## this action sets up Node.js for use in the workflow
        with:
          node-version: "20"
      - name: Build
        run: npm run build --if-present
      - name: Run server & tee logs ## Start the server and log output
        run: |
          npm run start 2>&1 | tee server.log &   ## Start the server in the background and log output to server.log
          npx wait-on http://localhost:8080
      - name: Tail server logs on failure
        if: failure() ##if the previous step fails, this will run
        run: tail -n 300 server.log

      - name: Run tests
        run: npx playwright test
      - name: Run tests (webServer in config will boot API)
        run: npx playwright test
      - name: Run tests
        run: npm test
      - name: Run server
        run: npm start & npx wait-on http://localhost:$PORT ## Wait for the server to start, the main process will be the server
      - name: Output information
        run: |
          echo "Server is running on port $PORT"
          echo "MongoDB is running on mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_CLUSTER_ADDRESS/$MONGODB_DB_NAME"
        #  --- 1) MongoDb  example ---

  mongodb-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: chcek files
        run: ls -la

      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps ## relevent to root folder of the repo
      - name: Load and cache dependencies
        uses: ./.github/actions/cached-deps ## relevent to root folder of the repo
      - name: Run MongoDB tests
        run: npm run test

  deploy:
    needs: [test, mongodb-test]
    runs-on: ubuntu-latest
    steps:
      - name: Output-information
        env:
          PORT: 3000 ## Port for the application, can be set to any available port
        run: |
          echo "Deployment started"
          echo "Server will run on port $PORT"
          echo "${{ env.PORT }}"
          echo "MongoDB is running on mongodb://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_CLUSTER_ADDRESS/$MONGODB_DB_NAME"

      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install deps & build site
        run: |
          npm ci
          npm run build --if-present

      - name: ChatGPT CodeReviewer
        uses: anc95/ChatGPT-CodeReview@v1.0.22
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          model: gpt-4o
          prompt: "Review the code and provide suggestions for improvement."
      - name: Build and push Docker images
        uses: docker/build-push-action@v6.18.0

  github:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod

      - name: Build site
        run: |
          mkdir -p public
          echo '<!doctype html><html><body><h1>Revive</h1></body></html>' > public/index.html

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        # If you're changing the branch from main,
        # also change the `main` in `refs/heads/main`
        # below accordingly.
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
